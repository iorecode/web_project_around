!function(){"use strict";var e={d:function(t,r){for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{M:function(){return U}});class t{constructor(e,t){this._inputs=Array.from(t.querySelectorAll(e.inputSelector)),this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._button=t.querySelector(e.submitButtonSelector),this._inactiveButtonClass=e.inactiveButtonClass}enableValidation(){this._toggleButton(this._inputs),this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._validateInputs(e),this._toggleButton(this._inputs)}))}))}_toggleButton(e){this._checkInvalid(e)?(this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)):(this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass))}_checkInvalid(e){return e.some((e=>!e.validity.valid))}_validateInputs(e){const t=e.nextElementSibling;e.validity.valid?(e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""):(e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage)}}class r{constructor(e,t,r,o,s){this._name=e.name,this._link=e.link,this._cardID=e._id,this._ownerID=e.owner._id,this._likes=e.likes,this._cardSelector=t,this._handleConfirm=r,this._currentUserId=o,this._handleLikes=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".photo__card").cloneNode(!0)}_setListeners(){const e=this._card.querySelector(".photo__like"),t=this._card.querySelector(".photo__delete");this._ownerID===this._currentUserId?t.addEventListener("click",(()=>{this._handleConfirm(this)})):t.style.display="none",e.addEventListener("click",(()=>this._handleLikes(this._cardID,this._card)))}updateLikes(e){const t=this._card.querySelector(".photo__like");this._card.querySelector(".photo__like-count").textContent=e.likes.length,e.likes.some((e=>e._id===this._currentUserId))?t.classList.add("photo__like_active"):t.classList.remove("photo__like_active")}generateCard(){return this._card=this._getTemplate(),this._card.querySelector(".photo__card-image").src=this._link,this._card.querySelector(".photo__card-image").alt=this._name,this._card.querySelector(".photo__text").textContent=this._name,this._card.querySelector(".photo__like-count").textContent=this._likes.length,this._likes.some((e=>e._id===this._currentUserId))&&this._card.querySelector(".photo__like").classList.add("photo__like_active"),console.log("Card generated:",this._card),this._setListeners(),this._card}handleNoPics(){const e=document.querySelectorAll(".photo__card"),t=document.querySelector(".photo__empty");0===e.length?document.querySelector(".photo").insertAdjacentHTML("afterbegin",'<p class="photo__empty">NO PICTURES</p>'):t&&t.remove()}}document.querySelector(".user__name"),document.querySelector(".user__role");const o=document.querySelector(".user__image"),s=document.querySelector(".user__image-edit"),n=document.querySelector(".page__opacity"),i=(document.querySelectorAll(".photo__card"),document.querySelector(".photo__empty"),document.querySelector("#TitleInput"),document.querySelector("#LinkInput"),document.querySelector("#AboutInput")),a=document.querySelector("#NameInput"),c=document.querySelector("#FormProfile"),l=document.querySelector("#FormUpload"),d=document.querySelector(".user__edit"),u=document.querySelector(".user__add"),_=document.querySelector(".photo"),h=document.querySelectorAll(".form__btn-close"),p=document.querySelector(".popup__close");document.querySelector(".popup__image"),document.querySelector(".popup__image-subtitle");class m{constructor(e){this._popup=document.querySelector(e),this._isOpen=!1,this._handleEscClose=this._handleEscClose.bind(this)}open(){n.classList.add("page__opacity-toggled"),n.style.display="block",document.addEventListener("keydown",this._handleEscClose),this._isOpen=!0}close(){n.classList.remove("page__opacity-toggled"),n.style.display="none",document.removeEventListener("keydown",this._handleEscClose),this._isOpen=!1}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){document.addEventListener("click",(e=>{n.contains(e.target)&&this.close()})),p.addEventListener("click",(()=>{this.close()})),h.forEach((e=>{e.addEventListener("click",(()=>{this.close()}))}))}}class y extends m{constructor(e){super(e),this._popupSubtitle=this._popup.querySelector(".popup__image-subtitle"),this._popupImage=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._popup.style.display="inline-block",this._popupImage.src=e,this._popupSubtitle.textContent=t}close(){super.close(),this._popup.style.display="none",this._popupImage.src="",this._popupSubtitle.textContent=""}setEventListeners(){super.setEventListeners(),document.addEventListener("click",(()=>{this._isOpen&&this.close()}))}}class v extends m{constructor(e,t){super(e),this._handleSubmit=t.bind(this),this._inputList=this._popup.querySelectorAll(".form__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners();const e=document.querySelectorAll(".form__btn-close");this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),e.forEach((e=>{e.addEventListener("click",(()=>{this.close()}))}))}close(){super.close(),this._getInputValues(),this._popup.classList.remove("form_opened"),this._inputList.forEach((e=>{e.value="",console.log("cleared")}))}open(){super.open(),this._popup.classList.add("form_opened")}}class f{constructor({nameSelector:e,aboutSelector:t,pictureSelector:r}){this._nameElement=document.querySelector(e),this._aboutElement=document.querySelector(t),this._pictureElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._pictureElement.src}}setUserInfo({name:e,about:t,avatar:r}){console.log("Setting user info:",{name:e,about:t,avatar:r}),this._nameElement.textContent=e,this._aboutElement.textContent=t,r&&(this._pictureElement.src=r)}}class S{constructor(e){this._standardUrl=e.url,this._headers=e.headers}getInitialCards(){return fetch(`${this._standardUrl}/cards`,{headers:this._headers}).then((e=>e.ok?(console.log("cards loaded successfully"),e.json()):Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in getInitialCards:",e),Promise.reject(e))))}getUserData(){return fetch(`${this._standardUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?(console.log(e),e.json()):Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in getUserData:",e),Promise.reject(e))))}saveProfileChanges(e){return console.log("Saving profile changes:",e),fetch(`${this._standardUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>(console.log("Received response:",e),e.ok?e.json():Promise.reject(`Error: ${e.status}`)))).catch((e=>(console.error("Error in saveProfileChanges:",e),Promise.reject(e))))}updateProfilePicture({avatar:e}){return console.log("Updating profile picture with URL:",e),fetch(`${this._standardUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>(console.log("Received response:",e),e.ok?e.json():Promise.reject(`Error: ${e.status}`)))).catch((e=>(console.error("Error in updateProfilePicture:",e),Promise.reject(e))))}addCard(e){return fetch(`${this._standardUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in addCard:",e),Promise.reject(e))))}deleteCard(e){return fetch(`${this._standardUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in deleteCard:",e),Promise.reject(e))))}addLike(e){return fetch(`${this._standardUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in addLike:",e),Promise.reject(e))))}removeLike(e){return fetch(`${this._standardUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("Error in removeLike:",e),Promise.reject(e))))}}class g{constructor({data:e,renderer:t},r){this._renderList=e,this._renderMethod=t,this._renderContainer=r}_clearContainer(){this._renderContainer.innerHTML=""}renderItem(){this._clearContainer(),this._renderList.forEach((e=>{this._renderMethod(e)}))}setItem(e){this._renderContainer.prepend(e)}}const E=new f({nameSelector:".user__name",aboutSelector:".user__role",pictureSelector:".user__image-main"}),C=new S({url:"https://around.nomoreparties.co/v1/web-ptbr-cohort-11",headers:{authorization:"ef61af7f-62bd-42c6-ac64-de2d2731292b","Content-type":"application/json"}}),b=new g({data:[],renderer:e=>{const t=new r(e,"#card-template",handleCardClick).generateCard();b.setItem(t)}},_);function L(e,t){const r=t.querySelector(".photo__like"),o=t.querySelector(".photo__like-count");r.classList.contains("photo__like_active")?C.removeLike(e).then((e=>{r.classList.remove("photo__like_active"),o.textContent=e.likes.length})).catch((e=>{console.error(e)})):C.addLike(e).then((e=>{r.classList.add("photo__like_active"),o.textContent=e.likes.length})).catch((e=>{console.error(e)}))}function k(e){document.querySelectorAll(e).forEach((e=>e.querySelector(".photo__card-image").addEventListener("click",(t=>{t.stopPropagation();const r=e.querySelector(".photo__card-image").src,o=e.querySelector(".photo__text").textContent,s=new y(".popup");s.open(r,o),s.setEventListeners(".photo__card")}))))}function q(e,t){const r=document.querySelector(t);r?e?r.textContent+="...":r.textContent=r.textContent.replace("...",""):console.error(`Element with selector ${t} not found`)}const P=new S({url:"https://around.nomoreparties.co/v1/web-ptbr-cohort-11",headers:{authorization:"ef61af7f-62bd-42c6-ac64-de2d2731292b","Content-type":"application/json"}}),I=new f({nameSelector:".user__name",aboutSelector:".user__role",pictureSelector:".user__image-main"}),U=new class extends m{constructor(e,t){super(e),this._handleSubmit=t}open(e){super.open(),this._target=e,this._popup.classList.add("form_opened")}close(){super.close(),this._popup.classList.remove("form_opened")}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._target),this.close()}))}}("#SubmitCheck",(e=>{C.deleteCard(e._cardID).then((()=>{e._card.remove()})).catch((e=>{console.log(e)})),U.close()}));let w;U.setEventListeners(),P.getUserData().then((e=>{I.setUserInfo(e),w=e._id,P.getInitialCards().then((e=>{const t=new g({data:e,renderer:e=>{const o=new r(e,"#card-template",(e=>U.open(e)),w,L).generateCard();t.setItem(o)}},_);t.renderItem(),k(".photo__card")})).catch((e=>{console.error("Failed to load initial cards:",e)}))})).catch((e=>{console.error("Failed to fetch user data:",e)})),new t({inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button-disabled",inputErrorClass:"form__input-invalid",errorClass:"form__input-error"},c).enableValidation(),new t({inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button-disabled",inputErrorClass:"form__input-invalid",errorClass:"form__input-error"},l).enableValidation();const j=new v("#FormProfile",(function(e){return q(!0,"#UserUploadButton"),console.log("Submitting profile form with values:",e),""!==e.name&&""!==e.about?(console.log(e),this.close(),C.saveProfileChanges(e).then((e=>{console.log("Profile changes saved successfully:",e),E.setUserInfo(e),document.querySelector("#FormProfile").classList.remove("form_opened")})).catch((e=>{console.error("Failed to save profile changes:",e)})).finally((()=>q(!1,"#UserUploadButton")))):Promise.reject("Invalid input values")}));j.setEventListeners();const x=new v("#FormUpload",(function(e,t){if(q(!0,"#CardUploadButton"),""!==e.url&&""!==e.title){const o={name:e.title,link:e.url};C.addCard(o).then((e=>{console.log("New card added:",e),e.owner={_id:t};const o=new r(e,"#card-template",(e=>U.open(e)),t,L).generateCard();document.querySelector(".photo").prepend(o),k(".photo__card"),this.close()})).catch((e=>{console.error("Failed to add new card:",e)})).finally((()=>q(!1,"#CardUploadButton")))}else console.error("Title and URL cannot be empty")}));x.setEventListeners(),d.addEventListener("click",(()=>{j.open();const e=I.getUserInfo();a.value=e.name,i.value=e.about})),u.addEventListener("click",(()=>{x.open()}));const B=new v("#FormProfilePicture",(e=>{q(!0,"#PictureUploadButton");const t=e.profileUrl;P.updateProfilePicture({avatar:t}).then((e=>{I.setUserInfo({...e,avatar:e.avatar}),B.close()})).catch((e=>{console.error("Failed to update profile picture:",e)})).finally((()=>q(!1,"#PictureUploadButton")))}));B.setEventListeners(),new t({inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button-disabled",inputErrorClass:"form__input-invalid",errorClass:"form__input-error"},document.querySelector("#FormProfilePicture")).enableValidation(),o.addEventListener("click",(()=>{B.open()})),o.addEventListener("mouseover",(()=>{o.querySelector(".user__image-main").style.opacity="25%",s.style.display="block"})),o.addEventListener("mouseout",(()=>{o.querySelector(".user__image-main").style.opacity="100%",s.style.display="none"}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,